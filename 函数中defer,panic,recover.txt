


golang中的defer语句会将其后面跟随的语句进行延迟处理
在defer归属的函数即将返回时，将延迟处理的语句按defer的逆序进行执行
也就是，先将defer的语句最后执行，最后被defer的语句，最先被执行

defer在命名返回值和匿名函数中表现不一样



package main

import (
	"fmt"
)


//匿名自执行函数的写法
func fn1(){
	fmt.Println("开始")
	defer func(){
		fmt.Println("aaa")
		fmt.Println("bbc")
		fmt.Println("c")
	}()
	fmt.Println("结束")
}

//调用方法返回0(匿名返回值)，返回没有操作的值
//func f2() int{
//	var a int //a：0
//
//	defer func() {
//		a++
//		//fmt.Println(a)
//	}()
//	return a
//}

//命名返回值，返回1,也就是返回defer里面操作后的值
//func f3()(a int){
//
//	defer func() {
//		a++
//	}()
//	return a
//}

func f1() int{
	x :=5
	defer func() {
		x++
	}()
	return x //5
}

func f2()(x int){
	defer func() {
		x++
	}()//6
	return  5
}

func f3()(y int){
	x :=5
	defer func() {
		x++
	}()
	return x //5
}

func f4()(x int){
	defer func(y int) { //声明后未赋值，就是0
		fmt.Println(y)
		y++
	}(x)//defer注册要延迟执行的函数时，该函数所有的参数都需要确认其值
	fmt.Println("a=",x)
	return 5
}
func main() {

		//开始
	//结束
	//3
	//2
	//1

	//fmt.Println("开始")
	//defer fmt.Println("1")
	//defer fmt.Println("2")
	//defer fmt.Println("3")
	//
	//fmt.Println("结束")
	fmt.Println(f1())
	fmt.Println(f2())
	fmt.Println(f3())
	fmt.Println(f4())



 }





package main

import "fmt"

func calc(index string,a,b int)int{
	ret := a+b
	fmt.Println(index,a,b,ret)
	return ret
}


//defer注册要延迟函数时该函数所有的参数都需要确定其值
func main() {
	x:=1
	y:=2
	defer calc("AA",x,calc("A",x,y))
	x =10
	defer calc("BB",x,calc("B",x,y))
	y=20



 }
//注册顺序
	//defer calc("AA",x,calc("A",x,y))
	//defer calc("BB",x,calc("B",x,y))
// 执行顺序
	//defer calc("BB",x,calc("B",x,y))
	//
	//defer calc("AA",x,calc("A",x,y))
//所以开始是确认值的过程(注册时)
// 1.calc("A",x,y) A 1 2 3
// 2. calc("A",x,y)  B 10 2 12
//3. defer calc("BB",x,calc("B",x,y)) BB 10 12 22
// 4. defer calc("AA",x,calc("A",x,y)) AA 1 3 4





 }


panic,recover常用于异常处理

panic 可以在任何地方引起，但recover只有在defer调用的函数中有效



package main

import "fmt"

func fn1(){
	fmt.Println("fn1")
}
func fn2(){
	defer func() {
		err := recover()
		if err != nil{
			fmt.Println("err",err)
		}
	}()
	panic("跳出一个异常")
}

func main() {
	fn1()
	fn2()
	fmt.Println("结束")
}

package main

import "fmt"

func fn(a,b int)int{
	defer func() {
		err := recover()
		if err !=nil{
			fmt.Println("err",err)//err runtime error: integer divide by zero
		}
	}()

	fmt.Println(a/b)
}

func main() {
	fmt.Println(fn(10,0))
	fmt.Println("结束")
}




package main

import (
	"errors"
	"fmt"
)
// 模拟一个读取文件的方法

func readFile(fileName string)error{
	if fileName == "main.go"{
		return nil
	}else{
		return errors.New("读取文件失败")
	}
}

func myFn(){
	defer func() {
		err := recover()
		if err!=nil{
			fmt.Println("给管理员发送邮件")

		}
	}()
	err :=readFile("xx.go")
	if  err !=nil{
		panic(err)
	}
}

func main() {
	myFn()
	fmt.Println("继续执行")

}


