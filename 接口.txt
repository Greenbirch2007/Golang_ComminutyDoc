
golang中的接口(interface)

golang中的接口是一种抽象数据类型，golang中接口定义了对象的额行为规范
只定义规范不实现。接口中定义的规范由具体的对象来实现


golang中的接口也是一种数据类型，不需要显示实现，只需要一个变量含有界
接口类型中的所有方法，那么这个变量就实现了这个接口




golang中每个接口由数个方法组成

type 接口名  interface{
	方法名(参数列表) 返回值列表
}



package main

import "fmt"


//接口只是一个规范
//接口-----结构体-----结构体方法实现这个规范---结构体声明实例化---声明接口--让接口等于结构体（从而结构体的实例就实现了接口）
// 注意最后继承时，是让声明的接口等于实例化的结构体
type Usber interface {
	start()
	stop()

}
type Phone struct {
	Name string
	//手机要实现usb接口的话必须得实现usb接口中的所有方法
}


type Camera struct {

}

func (p Camera) start() {
	fmt.Println("相机启动")
}

func (p Camera) stop() {
	fmt.Println("相机关闭")
}


func (p Phone) start(){
	fmt.Println(p.Name,"启动")
}
func (p Phone) stop(){
	fmt.Println(p.Name,"关闭")
}
//如果接口里面有方法，必须要通过结构体或自定义方法来实现这个接口
func main(){
	//p:=Phone{
	//	Name: "华为手机",
	//}
	//var p1 Usber //golang中接口就是一个数据类型
	//p1 = p //表示手机实现了USB接口
	//p1.start()
	c := Camera{}
	var c1 Usber = c //表示相机实现了USB接口
	c1.start()
}