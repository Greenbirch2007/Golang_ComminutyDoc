

指针操心别的变量，存储他们的地址


指针也是一个变量，它是一个特殊变量，它存储不是一个普通的值，而是另一个变量的内存地址(应该是汇编语言的维度)

二、指针地址和指针类型
每个变量在运行时都拥有一个地址。这个地址代表变量在内存中的位置

&取地址符

ptr := &v

指针也有指针的地址

golang中所有变量都有一个内存地址

三 指针取值
（指针的核心是通过内存指针的操作，把值类型改成了引用类型）

在对普通变量使用&操作符取地址后获得这个变量的指针，
然后可以对指针使用*操作，也就是指针取值

四  new ，make


指针必须创建内存后才能使用

package main

import "fmt"

/*

指针（指针的核心是通过内存指针的操作，把值类型改成了引用类型）
*/

func fn1(x int){
	x = 10

}
func fn2(x *int){
	*x = 40
}
func main(){
	//var a int = 10
	//var p = &a //p是指针变量，p的类型是*int(指针类型)
	//fmt.Printf("%v  %T  %p \n",a,a,&a)
	//fmt.Printf("%v  %T  ",p,p)


	//var a int = 10
	//var b = &a //b是指针变量，bp的类型是*int(指针类型)
	//fmt.Printf("%v  %T  %p \n",a,a,&a)
	//fmt.Printf("%v  %T  %p",b,b,&b)
	//

	//a := 10
	//p := &a // p指针变量， 类型 *int
	////需求：希望通过p来打印a得知
	// //表示取出p这个变量对应的内存地址的值
	// *p =230 //通过指针变量也可以改变，对应内存地址的值
	// fmt.Println(p,*p)

	var a = 5
	fn1(a)
	fmt.Println(a) //实际还是值引用
	fn2(&a)
	fmt.Println(a)//转化为了类型引用




}